var searchIndex = JSON.parse('{\
"rustls_cng":{"doc":"Windows CNG bridge for rustls","t":"AAAAADLLLLLLLLLLLLLLLLLENNNNLLLLLLLLLLLLLLLLLLENNDNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["cert","error","key","signer","store","CertContext","acquire_key","as_chain_der","as_der","borrow","borrow_mut","clone","clone_into","fmt","from","inner","into","new_borrowed","new_owned","to_owned","try_from","try_into","type_id","CngError","InvalidCertificateChain","InvalidHashLength","UnsupportedKeyAlgorithm","WindowsError","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from","from_win32_error","into","provide","source","to_owned","to_string","try_from","try_into","type_id","AlgorithmGroup","Ecdh","Ecdsa","NCryptKey","None","Other","Pkcs1","Pss","Rsa","SignaturePadding","algorithm","algorithm_group","as_ncrypt_handle","bits","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","from","inner","into","into","into","new_borrowed","new_owned","partial_cmp","partial_cmp","sign","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","CngSigningKey","algorithm","algorithm_group","bits","borrow","borrow_mut","choose_scheme","fmt","from","into","key","new","supported_schemes","try_from","try_into","type_id","CertStore","CertStoreType","CurrentService","CurrentUser","LocalMachine","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","eq","find_all","find_by_issuer_name","find_by_issuer_str","find_by_sha1","find_by_subject_name","find_by_subject_str","fmt","fmt","from","from","from_pkcs12","inner","into","into","open","partial_cmp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rustls_cng","","","","","rustls_cng::cert","","","","","","","","","","","","","","","","","","rustls_cng::error","","","","","","","","","","","","","","","","","","","","","","","rustls_cng::key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustls_cng::signer","","","","","","","","","","","","","","","","rustls_cng::store","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wrapper struct for Windows CERT_CONTEXT","Error struct","CNG key wrapper","SigningKey implementation","Windows certificate store wrapper","CertContext wraps CERT_CONTEXT structure for high-level …","Attempt to silently acquire a CNG private key from this …","Return DER-encoded X.509 certificate chain","Return DER-encoded X.509 certificate","","","","","","Returns the argument unchanged.","Return a reference to the inner handle","Calls <code>U::from(self)</code>.","Construct CertContext as a borrowed object which does not …","Construct CertContext as an owned object which …","","","","","Errors that may be returned in this crate","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Algorithm group of the CNG private key","","","CNG private key wrapper","","","","","","Signature padding. Used with RSA keys.","Return algorithm name of the key","Return algorithm group of the key","Return NCRYPT_HANDLE","Return a number of bits in the key material","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return an inner CNG key handle","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a borrowed instance which doesn’t free the key …","Create an owned instance which frees the underlying handle …","","","Sign a given digest with this key. The <code>sign</code> slice must be …","","","","","","","","","","","","","Custom implementation of <code>rustls</code> SigningKey trait","","Return algorithm group of the key","Return number of bits in the key material","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return a reference to the CNG key","Create instance from the CNG key","Return supported signature schemes","","","","Windows certificate store wrapper","Certificate store type","","","","","","","","","","","","Get all certificates","Find list of certificates matching the exact issuer name","Find list of certificates matching the issuer substring","Find list of certificates matching the SHA1 hash","Find list of certificates matching the exact subject name","Find list of certificates matching the subject substring","","","Returns the argument unchanged.","Returns the argument unchanged.","Import certificate store from PKCS12 file","Return an inner handle to the store","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Open certificate store of the given type and name","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,17,17,0,20,17,20,20,17,0,2,2,2,2,17,20,2,17,20,2,17,20,2,17,20,2,17,20,17,20,2,17,20,2,2,17,20,2,2,2,17,20,2,17,20,2,17,20,2,17,20,2,17,20,2,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,27,27,27,27,28,27,28,27,27,28,27,28,28,28,28,28,28,27,28,27,28,28,28,27,28,28,27,27,27,28,27,28,27,28],"f":[0,0,0,0,0,0,[1,[[4,[2,3]]]],[1,[[4,[[6,[[6,[5]]]],3]]]],[1],[[]],[[]],[1,1],[[]],[[1,7],8],[[]],[1,9],[[]],[9,1],[9,1],[[]],[[],4],[[],4],[[],10],0,0,0,0,0,[[]],[[]],[3,3],[[]],[[3,3],11],[[3,7],8],[[3,7],8],[12,3],[[]],[[],3],[[]],[13],[3,[[15,[14]]]],[[]],[[],16],[[],4],[[],4],[[],10],0,0,0,0,0,0,0,0,0,0,[2,[[4,[16,3]]]],[2,[[4,[17,3]]]],[2,18],[2,[[4,[19,3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[20,20],[2,2],[[]],[[]],[[]],[[17,17],11],[[20,20],11],[[17,7],8],[[20,7],8],[[2,7],8],[[]],[[]],[[]],[2,21],[[]],[[]],[[]],[21,2],[21,2],[[17,17],[[15,[22]]]],[[20,20],[[15,[22]]]],[[2,20],[[4,[[6,[5]],3]]]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],10],[[],10],[[],10],0,[23,24],[23,17],[23,19],[[]],[[]],[23,[[15,[[26,[25]]]]]],[[23,7],8],[[]],[[]],[23,2],[2,[[4,[23,3]]]],[23],[[],4],[[],4],[[],10],0,0,0,0,0,[[]],[[]],[[]],[[]],[27,27],[[]],[28],[[27,27],11],[28,[[4,[[6,[1]],3]]]],[28,[[4,[[6,[1]],3]]]],[28,[[4,[[6,[1]],3]]]],[28,[[4,[[6,[1]],3]]]],[28,[[4,[[6,[1]],3]]]],[28,[[4,[[6,[1]],3]]]],[[27,7],8],[[28,7],8],[[]],[[]],[29,[[4,[28,3]]]],[28,30],[[]],[[]],[[27,29],[[4,[28,3]]]],[[27,27],[[15,[22]]]],[[]],[[],4],[[],4],[[],4],[[],4],[[],10],[[],10]],"p":[[3,"CertContext"],[3,"NCryptKey"],[4,"CngError"],[4,"Result"],[15,"u8"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[3,"CERT_CONTEXT"],[3,"TypeId"],[15,"bool"],[3,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[4,"AlgorithmGroup"],[3,"NCRYPT_HANDLE"],[15,"u32"],[4,"SignaturePadding"],[3,"NCRYPT_KEY_HANDLE"],[4,"Ordering"],[3,"CngSigningKey"],[4,"SignatureAlgorithm"],[8,"Signer"],[3,"Box"],[4,"CertStoreType"],[3,"CertStore"],[15,"str"],[3,"HCERTSTORE"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
